En un examen final hay N alumnos y P profesores. Cada alumno resuelve su examen, lo entrega y espera a que alguno de los profesores lo corrija y le indique la nota. 
Los profesores corrigen los exámenes respetando el orden en que los alumnos van entregando.

a. Considerando que P=1.

b. Considerando que P>1.

c. Ídem b) pero considerando que los alumnos no comienzan a realizar su examen hasta que todos hayan llegado al aula.

Nota: maximizar la concurrencia y no generar demora innecesaria.

INCISO A)

Process Alumno[id: 0..N-1]{
	texto examen;
	texto enunciado: ...;
	examen = resolverExamen(enunciado);
	Admin!resuelto(id, examen);
	Profesor?notaFinal(examen);
}

Process Profesor{
	texto examen;
	int nota;
	int idAlumno;
	while (True)  {
		Admin!pedirExamen();
		Admin?obtenerExamen(idAlumno, examen);
		nota = corregirExamen(examen);
		Alumno[idAlumno]!notaFinal(nota);
	}
}

Process Admin{
	cola cExamenes;
	texto examen;
	int idAux;
	
	do Alumno?resuelto(idAux, examen) -> Agregar(cExamenes, (idAux, examen));
	[] not Empty(cExamenes); Profesor?pedirExamen() -> Sacar(cExamenes,(idAux, examen));
														Profesor!obtenerExamen(idAux, examen);
	od
}
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

INCISO B)

Process Alumno[id: 0..N-1]{
	texto examen;
	texto enunciado: ...;
	examen = resolverExamen(enunciado);
	Admin!resuelto(id, examen);
	Profesor[*]?notaFinal(examen);     <---- UNICO CAMBIO
}

Process Profesor[id:0..P-1]{
	texto examen;
	int nota;
	int idAlumno;
	while (True)  {
		Admin!pedirExamen();
		Admin?obtenerExamen(idAlumno, examen);
		nota = corregirExamen(examen);
		Alumno[idAlumno]!notaFinal(nota);
	}
}

Process Admin{
	cola cExamenes;
	texto examen;
	int idAux;
	int idP;
	
	do Alumno?resuelto(idAux, examen) -> Agregar(cExamenes, (idAux, examen));
	[] not Empty(cExamenes); Profesor[*]?pedirExamen(idP) -> Sacar(cExamenes,(idAux, examen));
														Profesor[idP]!obtenerExamen(idAux, examen);
	od
}

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

INCISO C)

Process Alumno[id: 0..N-1]{
	texto examen;
	texto enunciado: ...;
	Admin!contador();
	Admin?empezar();
	examen = resolverExamen(enunciado);
	Admin!resuelto(id, examen);
	Profesor?notaFinal(examen);
}

Process Profesor{
	texto examen;
	int nota;
	int idAlumno;
	while (True)  {
		Admin!pedirExamen();
		Admin?obtenerExamen(idAlumno, examen);
		nota = corregirExamen(examen);
		Alumno[idAlumno]!notaFinal(nota);
	}
}

Process Admin{
	cola cExamenes;
	texto examen;
	int idAux;
	int idP;
	int i;
	
	for i = 1..N --> Alumno[*]?contador();

    for i = 1..N --> Alumno[i]!empezar();

	
	do Alumno?resuelto(idAux, examen) -> Agregar(cExamenes, (idAux, examen));
	[] not Empty(cExamenes); Profesor[*]?pedirExamen(idP) -> Sacar(cExamenes,(idAux, examen));
														Profesor[idP]!obtenerExamen(idAux, examen);
	od
}