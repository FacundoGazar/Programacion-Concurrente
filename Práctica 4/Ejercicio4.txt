Simular la atención en un locutorio con 10 cabinas telefónicas, el cual tiene un empleado que se encarga de atender a N clientes.
Al llegar, cada cliente espera hasta que el empleado le indique a qué cabina ir, la usa y luego se dirige al empleado para pagarle. 
El empleado atiende a los clientes en el orden en que hacen los pedidos, pero siempre dando prioridad a los que terminaron de usar la cabina. 
A cada cliente se le entrega un ticket factura. 

Nota: maximizar la concurrencia; suponga que hay una función Cobrar() llamada por el empleado que simula que el empleado le cobra al cliente. 


chan solicitarCabina(int);
chan obtenerCabina[N](int);
chan pagarEmpleado(int,int);
chan obtenerTicket[N](text);

Process Cliente [id: 0..N-1] {
    int cabina;
    text ticket;

    send solicitarCabina(id);
    receive obtenerCabina[id](cabina);
    usarCabina(cabina);
    send pagarEmpleado(id, cabina);
    receive obtenerTicket[id](ticket);
}

Process Empleado {
    bool cabinasOcup[10] = ([10] false);
    int idAux;
    int cabinaId;
    text ticket;

    while (true) {
        if (!empty (pagarEmpleado)){
            receive pagarEmpleado(idAux, cabinaId);
            cabinasOcup[cabinaId] = false;
            tickect = cobrar(idAux);
            send obtenerTicket[idAux](ticket);
        } else {
            if (!empty (solicitarCabina) && hayCabinaLibre(cabinasOcup)) {
                receive solicitarCabina(idAux);
                cabinaId = obtenerCabinaLibre(cabinasOcup);
                cabinasOcup[cabinaId] = true;
                send obtenerCabina[idAux](cabinaId);
            }
        }
    }
}